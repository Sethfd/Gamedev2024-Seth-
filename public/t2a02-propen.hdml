<html>
</head>
  <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Snake Game</title>
    <style>
        body { display: flex; justify-content: center; align-items: center; height: 100vh; margin: 0; background: #000; }
        canvas { border: 1px solid #fff; }
        #score { color: #fff; font-size: 20px; position: absolute; top: 10px; left: 10px; }
    </style>
</head>
<body>
    <div id="score">Score: 0</div>
    <canvas id="gameCanvas" width="400" height="400"></canvas>
    <script src="snake.js"></script>
</body>
</html>
const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');
const scoreElement = document.getElementById('score');

let snake = [{ x: 200, y: 200 }];
let direction = { x: 10, y: 0 };
let food = { x: 300, y: 300 };
let score = 0;
let aiEnemies = [{ x: 100, y: 100, direction: { x: 10, y: 0 } }];

function drawSnake() {
    ctx.fillStyle = 'green';
    snake.forEach(part => ctx.fillRect(part.x, part.y, 10, 10));
}

function moveSnake() {
    const head = { x: snake[0].x + direction.x, y: snake[0].y + direction.y };
    snake.unshift(head);
    if (head.x === food.x && head.y === food.y) {
        score += 10;
        scoreElement.textContent = `Score: ${score}`;
        generateFood();
    } else {
        snake.pop();
    }
}

function drawFood() {
    ctx.fillStyle = 'red';
    ctx.fillRect(food.x, food.y, 10, 10);
}

function generateFood() {
    food = {
        x: Math.floor(Math.random() * 40) * 10,
        y: Math.floor(Math.random() * 40) * 10
    };
}

function drawAIEnemies() {
    ctx.fillStyle = 'blue';
    aiEnemies.forEach(enemy => ctx.fillRect(enemy.x, enemy.y, 10, 10));
}

function moveAIEnemies() {
    aiEnemies.forEach(enemy => {
        enemy.x += enemy.direction.x;
        enemy.y += enemy.direction.y;
        if (enemy.x < 0 || enemy.x >= canvas.width || enemy.y < 0 || enemy.y >= canvas.height) {
            enemy.direction.x = -enemy.direction.x;
            enemy.direction.y = -enemy.direction.y;
        }
    });
}

function gameLoop() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    moveSnake();
    drawSnake();
    drawFood();
    drawAIEnemies();
    moveAIEnemies();
    if (checkCollision()) {
        alert('Game Over');
        document.location.reload();
    }
    setTimeout(gameLoop, 100);
}

function checkCollision() {
    const head = snake[0];
    for (let i = 1; i < snake.length; i++) {
        if (head.x === snake[i].x && head.y === snake[i].y) return true;
    }
    for (let enemy of aiEnemies) {
        if (head.x === enemy.x && head.y === enemy.y) return true;
    }
    return false;
}

document.addEventListener('keydown', event => {
    if (event.key === 'ArrowUp' && direction.y === 0) direction = { x: 0, y: -10 };
    if (event.key === 'ArrowDown' && direction.y === 0) direction = { x: 0, y: 10 };
    if (event.key === 'ArrowLeft' && direction.x === 0) direction = { x: -10, y: 0 };
    if (event.key === 'ArrowRight' && direction.x === 0) direction = { x: 10, y: 0 };
    </head>
    <body
      
});

gameLoop();
